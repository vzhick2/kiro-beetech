# AI Development Rules for KIRO-BEETECH Inventory System

## Project Context
- Internal business inventory management system (not public/commercial)
- Next.js 15.4.1 with React 19.1.0, TypeScript 5.8.3, Tailwind CSS 4.1.11
- Supabase for database and authentication
- Small business workflows with flexible data entry patterns

## AI Workflow Rules
- ALWAYS ask "Should I implement this?" before making file changes
- Provide options first, then wait for explicit approval
- Follow docs/requirements.md for feature specifications
- Use docs/data-model.md for database schema
- Reference docs/technical-design.md for architecture decisions
- Use docs/development-guide.md for development standards

## Autonomous Processing Rules
### Autonomous Actions (No Permission Needed)
- Fix linting and TypeScript errors
- Format code with Prettier
- Update documentation for completed tasks
- Use existing utility functions from src/lib/utils
- Follow established naming conventions
- Update tasks.md with âœ… and completion date when marking tasks complete
- Update CHANGELOG.md with version and description when adding features

### Permission Required Actions
- Add new features or components
- Modify database schema
- Change business logic
- Update dependencies
- Create new utility functions
- Update data-model.md and api-documentation.md when modifying database schema
- Update technical-design.md when changing architecture decisions

## Error Prevention Rules
- Check existing implementations before creating new ones
- Use existing utility functions from src/lib/utils
- Follow established naming conventions
- Verify imports and dependencies before adding
- Check for duplicate functionality
- Ensure all documentation is aligned before finalizing changes

## Code Standards (AI Must Follow)
- Use TypeScript strict mode with explicit return types
- Prefer interfaces over types for object shapes
- Write functional components with TypeScript interfaces (avoid React.FC)
- Use server components by default, 'use client' only when necessary
- Use Tailwind CSS for ALL styling (no CSS-in-JS)
- Implement early returns for better readability
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)

## AI Code Quality Standards
- Use Zod validation for runtime type safety
- Implement exhaustive branch checking with ensureExhaustive patterns
- Use efficient TypeScript checking with --skipLibCheck for development
- Prioritize type safety over convenience

## Business Logic Requirements
- Support negative inventory with warnings (real-world flexibility)
- Implement mutable transaction logs with editable records and timestamps
- Add cycle count alerts for proactive inventory management
- Design mobile-first for workshop operations
- Create direct-edit workflows for quick updates
- Support back-dating for corrections

## File Structure Patterns
- `src/app/` - Next.js 15 App Router pages
- `src/components/` - Reusable UI components
- `src/lib/` - Utilities, Supabase client, business logic
- `src/hooks/` - Custom React hooks
- `src/types/` - TypeScript definitions
- `docs/` - Project specifications

## Error Handling Patterns
- Prioritize error handling at function beginnings
- Use guard clauses for preconditions
- Implement Zod validation for runtime type checking
- Create user-friendly error messages with clear actions

## State Management Patterns
- Use TanStack Query for server state and caching
- Use Zustand for global UI state only
- Use URL params for view state
- Use server actions for mutations

## Database Patterns
- Use Supabase client for database operations
- Implement row-level security policies
- Use PostgreSQL RPCs for atomic operations
- Use display ID pattern for user-facing references

## AI Development Commands
- Use `pnpm ai:validate` for fast validation (type-check, lint, format)
- Use `pnpm ai:validate:full` for full type-check for production builds
- Use `pnpm ai:fix` for auto-fixing common issues
- Use `pnpm ai:type-check` for fast type-check only
- Use `pnpm build` for production build
- Use `pnpm supabase:types` for updating database types

## Development Server Rules
- NEVER suggest or ask to run `pnpm dev` or start development servers
- User manages development server independently
- Focus on code implementation and testing via build validation
- Use `pnpm build` to verify functionality instead of running servers

## AI Behavior Rules
- This is an internal business tool prioritizing flexibility over rigid constraints
- Focus on real-world workflows and forgiving data entry
- Implement business logic that matches actual workshop operations
- Prioritize user experience over technical perfection 